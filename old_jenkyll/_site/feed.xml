<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-04T23:57:31-06:00</updated><id>http://localhost:4000/</id><title type="html">Sean Codes</title><subtitle>Hi! I'm a software developer in Chicago exploring Web Technology, Network Programming, and 2D Animation/Game development.
</subtitle><entry><title type="html">Focus Pointer Events Toggle Trick</title><link href="http://localhost:4000/2017/05/22/focus-pointer-events-toggle-trick" rel="alternate" type="text/html" title="Focus Pointer Events Toggle Trick" /><published>2017-05-22T00:00:00-05:00</published><updated>2017-05-22T00:00:00-05:00</updated><id>http://localhost:4000/2017/05/22/focus-pointer-events-toggle-trick</id><content type="html" xml:base="http://localhost:4000/2017/05/22/focus-pointer-events-toggle-trick">&lt;p&gt;Bit abount using the &lt;code class=&quot;highlighter-rouge&quot;&gt;focus&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pointer-events&lt;/code&gt; to make a css only toggle button!&lt;/p&gt;

&lt;p data-height=&quot;200&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;d0e5e3343bf7bf47e2e3abb99b317e76&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Simple Focus Pointer Events Example&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/sean_codes/pen/d0e5e3343bf7bf47e2e3abb99b317e76/&quot;&gt;Simple Focus Pointer Events Example&lt;/a&gt; by Sean Codes (&lt;a href=&quot;https://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;
&lt;p&gt;We add a &lt;code class=&quot;highlighter-rouge&quot;&gt;tabindex=&quot;1&quot;&lt;/code&gt; to the div element so it can be focused. In the CSS when the div is focused we give it a property &lt;code class=&quot;highlighter-rouge&quot;&gt;pointer-events:none&lt;/code&gt;. This makes the button on clickable. Now when you click again it will lose focus. Acting as a toggle switch!&lt;/p&gt;

&lt;h2 id=&quot;the-html&quot;&gt;The html&lt;/h2&gt;
&lt;p&gt;Just a div with a tab index&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &amp;lt;div tabindex='1'&amp;gt;Click Me&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-css&quot;&gt;The CSS&lt;/h2&gt;

&lt;p&gt;Some extra styles for making it look button like! The only requirements is the &lt;code class=&quot;highlighter-rouge&quot;&gt;:focus&lt;/code&gt; with a &lt;code class=&quot;highlighter-rouge&quot;&gt;pointer-events:none&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  div{
     max-width:200px;
     height:50px;
     line-height:50px;
     text-align:center;
     margin:40px auto;
     background:#f22;
     user-select:none;
     outline:none;
  }
  div:focus{
     pointer-events:none;
     background:#465;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please take a look at the codepen and let me know if you need any help!&lt;/p&gt;

&lt;p&gt;This is a pretty simple effect that I haven’t found to much use in the wild but I find it extra convenient to use for demo and examples where I would normally use label and checkboxes for toggles!
Here is a more interesting example :]&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;809d25c6012943927ebaf36ec16bce42&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Only Focus Toggle&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/sean_codes/pen/809d25c6012943927ebaf36ec16bce42/&quot;&gt;CSS Only Focus Toggle&lt;/a&gt; by Sean Codes (&lt;a href=&quot;https://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="codepen" /><category term="title" /><category term="javascript" /><category term="title" /><category term="frontend" /><summary type="html">Bit abount using the focus and pointer-events to make a css only toggle button!</summary></entry><entry><title type="html">Canvas Particle Background Connection</title><link href="http://localhost:4000/2017/03/29/canvas-particle-background-effect" rel="alternate" type="text/html" title="Canvas Particle Background Connection" /><published>2017-03-29T00:00:00-05:00</published><updated>2017-03-29T00:00:00-05:00</updated><id>http://localhost:4000/2017/03/29/canvas-particle-background-effect</id><content type="html" xml:base="http://localhost:4000/2017/03/29/canvas-particle-background-effect">&lt;p&gt;Some notes on creating a particle connection effect!&lt;/p&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;OpoQEp&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Front End Canvas Particle Connection&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/sean_codes/pen/OpoQEp/&quot;&gt;Front End Canvas Particle Connection&lt;/a&gt; by Sean Codes (&lt;a href=&quot;http://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;how-this-works&quot;&gt;How this works&lt;/h2&gt;
&lt;p&gt;To do this effect we will create a set number of particles. Each with a speed, position, and size. Then we will move them on that speed using &lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrame&lt;/code&gt;. Inside that movement we will also check the distance from all the other points! If the distance is short enough we will draw a line from each particles x,y coordiantes!&lt;/p&gt;

&lt;h2 id=&quot;the-html&quot;&gt;The html&lt;/h2&gt;
&lt;p&gt;All we need is a canvas element!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&amp;lt;/canvas&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setup-the-javascript&quot;&gt;Setup the javascript&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var canvas = document.querySelector('canvas')
var body = document.querySelector('body')
canvas.width = body.offsetWidth
canvas.height = body.offsetHeight
var ctx = canvas.getContext('2d')
var particleCount = 100
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;creating-the-particles&quot;&gt;Creating the particles&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;partCnt = 100;
var particles = []
for(var i = 0; i &amp;lt; partCnt; i++){
   particles[i] = {
      x: random_range(0, canvas.width),
      y: random_range(0, canvas.height),
      xSpeed: random_range(-2, 2),
      ySpeed: random_range(-2, 2),
      size: random_range(1, 10),
      range: random_range(10, 75)
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-random_range-function&quot;&gt;The random_range function&lt;/h2&gt;
&lt;p&gt;Just incase you’re not bringing your own! :]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function random_range(min, max){
   return Math.round(min + Math.random() * (max-min))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;part1-drawing-and-moving-the-particles&quot;&gt;PART1: Drawing and moving the particles&lt;/h2&gt;
&lt;p&gt;We create a draw function. Then we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;fillRect&lt;/code&gt; to draw the particles. Also call the &lt;code class=&quot;highlighter-rouge&quot;&gt;check_points&lt;/code&gt; function we will create below!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;requestAnimationFrame(draw)
function draw(){
   requestAnimationFrame(draw)
   ctx.fillStyle = '#222'
   ctx.fillRect(0, 0, canvas.width, canvas.height)

   //Loop each particle
   for(var i = 0; i &amp;lt; partCnt; i++){

      //Draw the particle
      particles[i].x += particles[i].xSpeed;
      particles[i].y += particles[i].ySpeed;
      ctx.fillStyle = &quot;#555&quot;
      ctx.fillRect(particles[i].x,particles[i].y,particles[i].size,particles[i].size)

      //How we will draw the lines
      check_points(particles[i].x, particles[i].y, particles[i].size, particles[i].range)

      //This will flip the particles across if they go out of bounds!
      if(particles[i].x &amp;gt; canvas.width)
         particles[i].x = 0
      if(particles[i].x &amp;lt; 0)
         particles[i].x = canvas.width
      if(particles[i].y &amp;gt; canvas.height)
         particles[i].y = 0
      if(particles[i].y &amp;lt; 0)
         particles[i].y = canvas.height
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;part2-drawing-the-lines&quot;&gt;PART2: Drawing the lines&lt;/h2&gt;
&lt;p&gt;This will do a distance calculation on each particle to see if we are within range of another particles. If we are then draw a line between them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function check_points(x, y, size, range){
   for(var i = 0; i &amp;lt; partCnt; i++){
      if(distance(x, y, particles[i].x, particles[i].y) &amp;lt; range){
         ctx.beginPath()
         ctx.moveTo(x+size/2,y+size/2)
         ctx.lineTo(particles[i].x+particles[i].size/2,particles[i].y+particles[i].size/2)
         ctx.strokeStyle = &quot;#991100&quot;
         ctx.stroke()
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;part3-the-distance-function&quot;&gt;PART3: the distance function&lt;/h2&gt;
&lt;p&gt;Again if you did not bring your own!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function distance(x1, y1, x2, y2){
   return Math.sqrt(Math.pow((x2 - x1),2) + Math.pow((y2 - y1),2) )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><category term="codepen" /><category term="title" /><category term="javascript" /><category term="title" /><category term="frontend" /><summary type="html">Some notes on creating a particle connection effect!</summary></entry><entry><title type="html">Dynamic Vertical Height Dropdowns</title><link href="http://localhost:4000/2017/03/26/dynamic-vertical-height-dropdown" rel="alternate" type="text/html" title="Dynamic Vertical Height Dropdowns" /><published>2017-03-26T00:00:00-05:00</published><updated>2017-03-26T00:00:00-05:00</updated><id>http://localhost:4000/2017/03/26/dynamic-vertical-height-dropdown</id><content type="html" xml:base="http://localhost:4000/2017/03/26/dynamic-vertical-height-dropdown">&lt;p&gt;Notes for dynamic sized drop downs&lt;/p&gt;

&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;
&lt;p&gt;Sometimes when doing drops downs the easiest way is by using the max-height and transitioning on that. We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;transform:translateY(Xpx)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-html&quot;&gt;The html&lt;/h2&gt;
&lt;p&gt;We need a container with a main button and list of buttons inside!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   .dropdown
      .toggle(tabindex=1) Click Me!
      .list
         .button button 1
         .button button 2
         .button button 3
         .button button 4
         .button button 5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-css&quot;&gt;The CSS&lt;/h2&gt;

&lt;p&gt;Pretty simple CSS here you don’t need SCSS but I find it better for organization. Things to note are the &lt;code class=&quot;highlighter-rouge&quot;&gt;.dropdown&lt;/code&gt; has a   &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow:hidden&lt;/code&gt;. That is what will hide the dropdown when in the &lt;code class=&quot;highlighter-rouge&quot;&gt;transform:translateY(-100%)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   .dropdown{
      position:relative;
      overflow:hidden;
      max-width:200px;
      margin:40px auto;
      .toggle{
         height:40px;
         line-height:40px;
         text-align:center;
         background:#CDCDCD;
         width:200px;
         z-index:1;
         position:relative;
         &amp;amp;:focus{
            pointer-events:none;
            ~ .list{
               transform:translateY(0%);
            }
         }
      }
      .list{
         z-index:0;
         position:relative;
         transform:translateY(-100%);
         transition:all 0.5s;
      }
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please take a look at the codepen and let me know if you need any help!&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;e35995270eb6e206fba63a393e4d4f6c&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Dynamic Vertical Height DropDown&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/sean_codes/pen/e35995270eb6e206fba63a393e4d4f6c/&quot;&gt;Dynamic Vertical Height DropDown&lt;/a&gt; by Sean Codes (&lt;a href=&quot;https://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="codepen" /><category term="title" /><category term="javascript" /><category term="title" /><category term="frontend" /><summary type="html">Notes for dynamic sized drop downs</summary></entry><entry><title type="html">Button Border Animations</title><link href="http://localhost:4000/2017/03/04/psuedo-button-border-transition-animations" rel="alternate" type="text/html" title="Button Border Animations" /><published>2017-03-04T00:00:00-06:00</published><updated>2017-03-04T00:00:00-06:00</updated><id>http://localhost:4000/2017/03/04/psuedo-button-border-transition-animations</id><content type="html" xml:base="http://localhost:4000/2017/03/04/psuedo-button-border-transition-animations">&lt;p&gt;This is a codepen on border animations on square buttons! These are my notes on the project:&lt;/p&gt;

&lt;h2 id=&quot;how-this-works&quot;&gt;How this works&lt;/h2&gt;
&lt;p&gt;The basic behind the trick is to use both the psuedo selectors &lt;code class=&quot;highlighter-rouge&quot;&gt;::after&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;::before&lt;/code&gt;. The after will take care of the top and right border and the before will take care of the bottom and left border!&lt;/p&gt;

&lt;h2 id=&quot;the-html&quot;&gt;The html&lt;/h2&gt;
&lt;p&gt;This animation should only require one &lt;code class=&quot;highlighter-rouge&quot;&gt;button&lt;/code&gt; element.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;button class=&quot;btn&quot;&amp;gt;This is the button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-animations&quot;&gt;The animations&lt;/h2&gt;
&lt;p&gt;What I did was create a list of all the animations I wanted to use. The naming convention works like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;n = Do not display
s = static hold the size
a = animate the side
aW_sH = Animate width and keep height at 100%
sW_aH = Keep width at 100% and animate the height
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* A weird set of keyframes that can do anything */
@keyframes aW_sH{ from{height:100%; width:0%;} to{height:100%; width:100%;} }
@keyframes sW_aH{ from{width:100%; height:0%;} to{width:100%; height:100%;} }
@keyframes sW_sH{ from{width:100%; height:100%;} to{width:100%; height:100%;} }
@keyframes nW_nH{ from,to{border-width:0px;} }
@keyframes nW_aH{ from{height:0%;} to{height:100%;} }
@keyframes nW_sH{ from,to{height:100%;} }
@keyframes sW_nH{ from,to{width:100%;} }
@keyframes aW_nH{ from{width:0%;} to{width:100%;} }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-manuver-&quot;&gt;The manuver :]&lt;/h2&gt;

&lt;p&gt;At the end of the animation cycle im using &lt;code class=&quot;highlighter-rouge&quot;&gt;animate: sH_sW 1s inifinite&lt;/code&gt;. This is going to hold the position of the height and width so we can animate the next psuedo element!&lt;/p&gt;

&lt;p&gt;Please take a look at the codepen and let me know if you need any help!&lt;/p&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;YZWqLo&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Front End Day 41 - Button Border Transition&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/sean_codes/pen/YZWqLo/&quot;&gt;Front End Day 41 - Button Border Transition&lt;/a&gt; by Sean Codes (&lt;a href=&quot;http://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="codepen" /><category term="title" /><category term="javascript" /><category term="title" /><category term="frontend" /><summary type="html">This is a codepen on border animations on square buttons! These are my notes on the project:</summary></entry><entry><title type="html">Interesting live typing title header text</title><link href="http://localhost:4000/2017/03/01/live-typing-title-header-text" rel="alternate" type="text/html" title="Interesting live typing title header text" /><published>2017-03-01T00:00:00-06:00</published><updated>2017-03-01T00:00:00-06:00</updated><id>http://localhost:4000/2017/03/01/live-typing-title-header-text</id><content type="html" xml:base="http://localhost:4000/2017/03/01/live-typing-title-header-text">&lt;p&gt;An example for doing live typing title text. These are my notes on the project:&lt;/p&gt;

&lt;h2 id=&quot;how-this-works&quot;&gt;How this works&lt;/h2&gt;
&lt;p&gt;This pen is an easy pen that uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; to basically flip from typing and backspacing and in between switch words.&lt;/p&gt;

&lt;h2 id=&quot;set-up&quot;&gt;Set up&lt;/h2&gt;

&lt;p&gt;The html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- We will insert out typed text into this span! --&amp;gt;
&amp;lt;h1&amp;gt;Title &amp;lt;span id=&quot;typed&quot;&amp;gt;&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I created a few variables.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;words = ['word1', 'word2', 'word3'] //Our words
index = 0 //Keep track of the word we are using
pos = 0 //How many letters we have typed
typed = '' //Hold the word we are typing
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A few functions&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; type() //Will add a letter into the typed variable
 backspace() //Will remove a letter from the typed variable
 render() //We set the title to the typed variable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now each time I type I will add a letter to the &lt;code class=&quot;highlighter-rouge&quot;&gt;typed&lt;/code&gt; variable and add &lt;code class=&quot;highlighter-rouge&quot;&gt;++&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;pos&lt;/code&gt; variable. When I do backspace I do the opposite. After running either of those functions I will call render().&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Please take a look at the codepen and let me know if you need any help!&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;WpQeJy&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Front End Day 38.1 - Typing Header &quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/sean_codes/pen/WpQeJy/&quot;&gt;Front End Day 38.1 - Typing Header &lt;/a&gt; by Sean Codes (&lt;a href=&quot;http://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="codepen" /><category term="title" /><category term="javascript" /><category term="title" /><category term="frontend" /><summary type="html">An example for doing live typing title text. These are my notes on the project:</summary></entry><entry><title type="html">Classy Floating direction aware cards with no JavaScript only CSS</title><link href="http://localhost:4000/2017/02/27/floating-direction-aware-cards" rel="alternate" type="text/html" title="Classy Floating direction aware cards with no JavaScript only CSS" /><published>2017-02-27T00:00:00-06:00</published><updated>2017-02-27T00:00:00-06:00</updated><id>http://localhost:4000/2017/02/27/floating-direction-aware-cards</id><content type="html" xml:base="http://localhost:4000/2017/02/27/floating-direction-aware-cards">&lt;p&gt;A codepen of floating direction aware cards! The effect i really interesting. These are my notes on the subject:&lt;/p&gt;

&lt;h2 id=&quot;the-basics-of-direction-awareness&quot;&gt;The basics of direction awareness&lt;/h2&gt;
&lt;p&gt;The effect works by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; selector and &lt;code class=&quot;highlighter-rouge&quot;&gt;z-index&lt;/code&gt;. What we do it create a container then inside we lay target squares or corners and then final square or the ‘plane’. When we hover any of the target squares we will use the &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; selector to select the plain and then rotate the x and y towards that direction&lt;/p&gt;

&lt;h2 id=&quot;the-basic-html&quot;&gt;The basic html&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; div.contain
   div.corner.c1
   div.corner.c2
   div.corner.c3
   div.corner.c4
   div.plane Mouse on me!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-basic-css&quot;&gt;The basic CSS&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* The container */
.contain {
   width:200px;
   height:200px;
   margin:auto;
   position:relative;
   perspective:400px;
   display:flex;
   flex-wrap:wrap;
}

/* The corners */
.contain .corner {
   flex: 1;
   min-width:50%;
   height:50%;
   padding:0px;
   float:left;
   transform-style:preserve-3d;
   transition: 1s;
}

/* Selecting the plain on hover of a target */
.contain .corner.c1:hover ~ .plane { transform: rotateY(-10deg) rotateX(10deg); }
.contain .corner.c2:hover ~ .plane { transform: rotateY( 10deg) rotateX(10deg); }
.contain .corner.c3:hover ~ .plane { transform: rotateY(-10deg) rotateX(-10deg); }
.contain .corner.c4:hover ~ .plane { transform: rotateY( 10deg) rotateX(-10deg); }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-effect-simply&quot;&gt;The effect simply&lt;/h2&gt;
&lt;p&gt;Here is a simple example of usine the effect with four corners!&lt;/p&gt;

&lt;p data-height=&quot;350&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;wgXNvv&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Practice Direction Aware&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/sean_codes/pen/wgXNvv/&quot;&gt;Practice Direction Aware&lt;/a&gt; by Sean Codes (&lt;a href=&quot;http://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;using-scss-to-enhance-the-effect&quot;&gt;Using SCSS to enhance the effect&lt;/h2&gt;

&lt;p&gt;By using SCSS we can use math to help us create more target points. I noticed if you make the number to high it will actually make the effect very jittery. I found 2-5 wide to be the best! take a look at the below to see the mixin I used to make the effect for tall, wide, and square cards!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; @mixin targetPractice($class, $w, $h){
    $w: $w;
    $h: $h;
    $max_angle: 20deg;
    $pos: 0;

    #{$class} .target{
       min-width:100%/$w;
       min-height:100%/$h;
       z-index:2;

       &amp;amp;:hover{
          ccbackground:#ccc;
       }
    }

    //Double looping is that even legal?
    @for $cur_h from 1 to $h+1 {
       @for $cur_w from 1 to $w+1{
          $pos: $pos + 1;
          $h_tilt: (ceil($h/2) - $cur_h)/$h * $max_angle;
          $w_tilt: (ceil($w/2) - $cur_w)/$w * $max_angle;
          #{$class} .target:nth-child(#{$pos}) {
             &amp;amp;:hover ~ .card{
                transform:rotateY($w_tilt) rotateX(-$h_tilt);
                &amp;amp; .inside{
                   box-shadow:0px 0px 30px rgba(0, 0, 0, 1);
                }
             }
          }
       }
    }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE: This effect doesnt require SCSS but it will be useful for staying organized and mathmatically enhancing the effect.
Please take a deeper look at the codepen and let me know if you need any help!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p data-height=&quot;500&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;jBEBpz&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Front End Day 36 - Classy Floating direction aware cards&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/sean_codes/pen/jBEBpz/&quot;&gt;Front End Day 36 - Classy Floating direction aware cards&lt;/a&gt; by Sean Codes (&lt;a href=&quot;http://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="codepen" /><category term="material" /><category term="css" /><category term="coding" /><category term="nojs" /><summary type="html">A codepen of floating direction aware cards! The effect i really interesting. These are my notes on the subject:</summary></entry><entry><title type="html">Toggle login and register form single page app animation, using only CSS</title><link href="http://localhost:4000/2017/02/23/no-javascript-login-register-toggle-form-animation" rel="alternate" type="text/html" title="Toggle login and register form single page app animation, using only CSS" /><published>2017-02-23T00:00:00-06:00</published><updated>2017-02-23T00:00:00-06:00</updated><id>http://localhost:4000/2017/02/23/no-javascript-login-register-toggle-form-animation</id><content type="html" xml:base="http://localhost:4000/2017/02/23/no-javascript-login-register-toggle-form-animation">&lt;p&gt;Switching a login and register form with a animation where the first slides out maintaining the front position then forces a lower z-index to slide behind. Just vanilla CSS. These are my notes on the project:&lt;/p&gt;

&lt;h2 id=&quot;the-basics&quot;&gt;The basics&lt;/h2&gt;
&lt;p&gt;To do this switch I’m using two divs and two radios. To start I set the divs with a min-height and max-width and &lt;code class=&quot;highlighter-rouge&quot;&gt;margin:auto&lt;/code&gt;. I create two animations for &lt;code class=&quot;highlighter-rouge&quot;&gt;slideIn&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;slideOut&lt;/code&gt;.
When I have an input checked I use the slidein animation and use the slideout animation on the non checked.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input.login + div,
input.register + div{
  transform:translateX(0px);
  animation: 1s slideout;
  z-index: 1;
}

input.login:checked + div,
input.register:checked + div{
  transform:translateX(0px);
  animation: 1s slidein;
  z-index:0;
}

 @keyframes moveout{
   0%, 100%{ transform:translateX(0px); }
   50%{ transform:translateX(-160px); }
}

@keyframes movein{
   0%, 100%{transform:translateX(0px); }
   50%{ transform:translateX(160px); }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-interesting-trick&quot;&gt;The interesting trick&lt;/h2&gt;
&lt;p&gt;When I was makign this I could not find any information on swapping z-index in the animation and holding it without causing a flash when the z-index switched at first. To fix this I used an &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-delay&lt;/code&gt; and set the z-index after the animation was halfway through!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* Inside the slide in add these */
input.login:checked + div,
input.register:checked + div{
  animation: 1s slidein, 2s forceTop infinite;
  animation-delay: 0s, 0.5s;
}

@keyframes forceTop{
  from, to{z-index:2; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-extras&quot;&gt;The extras&lt;/h2&gt;
&lt;p&gt;I also added labels and opacity/background changing! I think if you are able to master the top section of this and get the slides functioning you should be able to add those features. The basics for those features revolve around the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; selector. I sometimes select through multiple elements using it like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input.login:checked + label + .form{
  /* Do something to the form inside this div! */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please take a deeper look at the codepen and let me know if you need any help!&lt;/p&gt;

&lt;p data-height=&quot;600&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;PpoOzr&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Front End Day - 35 - No JS Login Register toggle&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/sean_codes/pen/PpoOzr/&quot;&gt;Front End Day - 35 - No JS Login Register toggle&lt;/a&gt; by Sean Codes (&lt;a href=&quot;http://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="codepen" /><category term="material" /><category term="css" /><category term="coding" /><category term="nojs" /><category term="login" /><category term="form" /><summary type="html">Switching a login and register form with a animation where the first slides out maintaining the front position then forces a lower z-index to slide behind. Just vanilla CSS. These are my notes on the project:</summary></entry><entry><title type="html">Toggle switches, radio buttons, and checkbox styles, using only CSS</title><link href="http://localhost:4000/2017/02/21/pure-css-checkboxes-toggle-switch-radio" rel="alternate" type="text/html" title="Toggle switches, radio buttons, and checkbox styles, using only CSS" /><published>2017-02-21T00:00:00-06:00</published><updated>2017-02-21T00:00:00-06:00</updated><id>http://localhost:4000/2017/02/21/pure-css-checkboxes-toggle-switch-radio</id><content type="html" xml:base="http://localhost:4000/2017/02/21/pure-css-checkboxes-toggle-switch-radio">&lt;p&gt;Interesting radio, checkbox, and toggle switches! I just wanted to share with you my notes of making this project&lt;/p&gt;

&lt;h2 id=&quot;the-toggle-switch&quot;&gt;The toggle switch&lt;/h2&gt;

&lt;p&gt;To do the toggle switch I used a &lt;code class=&quot;highlighter-rouge&quot;&gt;:after&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; selector! I wrapped the checkbox and label inside a div and created a separate label for displaying the text and the inner is going to draw the display. Hide the input and then use the label to draw the lane and the &lt;code class=&quot;highlighter-rouge&quot;&gt;after&lt;/code&gt; to draw the toggle switch. When the checkbox is checked move the toggle switch using &lt;code class=&quot;highlighter-rouge&quot;&gt;transform: translateX(45px)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;div.fancyToggle
    label(for=&quot;toggle2&quot;) Toggle
    div.toggle
       input(type=&quot;checkbox&quot; id=&quot;toggle2&quot;)
       label(for=&quot;toggle2&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-radio-switch&quot;&gt;The radio switch&lt;/h2&gt;

&lt;p&gt;This one took a bit more trickery and most of it is just guessing numbers to get everything to fit correctly. This requires a wrapper div, and two of each label and input. Hide the radios. Use the wrapper to draw the lane. Then draw each label inside the lane on their sides one with the same color as the lane and the other a primary color when checked. I used &lt;code class=&quot;highlighter-rouge&quot;&gt;transform:scale()&lt;/code&gt; to make the effect!&lt;/p&gt;

&lt;h2 id=&quot;checkboxes&quot;&gt;Checkboxes&lt;/h2&gt;

&lt;p&gt;The checkbox did not require a wrapper but I used for positioning. First hide the checkbox. Then draw the label as the square. Then when checked use the &lt;code class=&quot;highlighter-rouge&quot;&gt;:after&lt;/code&gt; selector and draw a inner square with a primary color!&lt;/p&gt;

&lt;p&gt;Please take a deeper look at the codepen and let me know if you need any help!&lt;/p&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;ygmNJO&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Front End Day 33 - Fancy Checkbox and Toggle Switches&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/sean_codes/pen/ygmNJO/&quot;&gt;Front End Day 33 - Fancy Checkbox and Toggle Switches&lt;/a&gt; by Sean Codes (&lt;a href=&quot;http://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="codepen" /><category term="material" /><category term="css" /><category term="coding" /><category term="nojs" /><summary type="html">Interesting radio, checkbox, and toggle switches! I just wanted to share with you my notes of making this project</summary></entry><entry><title type="html">Fancy Loading Bar with scale, rotate, and translate</title><link href="http://localhost:4000/2017/02/19/fancy-circular-loading-bar" rel="alternate" type="text/html" title="Fancy Loading Bar with scale, rotate, and translate" /><published>2017-02-19T00:00:00-06:00</published><updated>2017-02-19T00:00:00-06:00</updated><id>http://localhost:4000/2017/02/19/fancy-circular-loading-bar</id><content type="html" xml:base="http://localhost:4000/2017/02/19/fancy-circular-loading-bar">&lt;p&gt;Circular loading bar. Where dots are displayed in a cricle and grow! Also with a line underneith. These are some notes I took while making the project!&lt;/p&gt;

&lt;h2 id=&quot;the-html-pug&quot;&gt;The HTML (Pug)&lt;/h2&gt;
&lt;p&gt;The mark up is a bit simple. We need 10 elements within a parent. With a chicle element within the 10 elements. This is because we want to simply use scale for smooth animations and also will be using translate and scale will also scale translates!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.container
   .bubbles
      - for (var i = 0; i &amp;lt; 10; ++i)
         .bubble
            .circle
   .bar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;how-to-position-in-a-circle&quot;&gt;How to position in a circle&lt;/h2&gt;
&lt;p&gt;To position the elements I used SCSS to look over 10 times and rotating then translating on the Y axis!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@for $i from 0 to 15 {
   .bubble:nth-child(#{$i}){
      flex:1;
      position:absolute;
      display:inline-block;
      margin:auto;
      transform: rotateZ($i * 36deg) translateY(50px);
   }

   /* Read below */
   .bubble:nth-child(#{$i}) .circle{
      animation-delay: $i * 0.1s;
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-animation&quot;&gt;The animation&lt;/h2&gt;
&lt;p&gt;To do the animation I used &lt;code class=&quot;highlighter-rouge&quot;&gt;transform:scale(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-delay&lt;/code&gt; I put the delay inside the same loop above! I’m only animating on the child of the bubble the &lt;code class=&quot;highlighter-rouge&quot;&gt;.circle&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@keyframes pulse{
   0%{ transform: scale(0.2); }
   50%{ transform: scale(1); opacity:0.75; }
   100%{ transform: scale(0.2); }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is the codepen please take a look let me know if you have any questions or need any help!&lt;/p&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;RKzNWj&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Front End Day 31 - Loading Bar with bubbles&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/sean_codes/pen/RKzNWj/&quot;&gt;Front End Day 31 - Loading Bar with bubbles&lt;/a&gt; by Sean Codes (&lt;a href=&quot;http://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="codepen" /><category term="material" /><category term="css" /><category term="coding" /><category term="nojs" /><summary type="html">Circular loading bar. Where dots are displayed in a cricle and grow! Also with a line underneith. These are some notes I took while making the project!</summary></entry><entry><title type="html">Pure CSS Material Design FAB Button Burst Modal</title><link href="http://localhost:4000/2017/02/18/material-fab-burst-modal-button-with-content" rel="alternate" type="text/html" title="Pure CSS Material Design FAB Button Burst Modal" /><published>2017-02-18T00:00:00-06:00</published><updated>2017-02-18T00:00:00-06:00</updated><id>http://localhost:4000/2017/02/18/material-fab-burst-modal-button-with-content</id><content type="html" xml:base="http://localhost:4000/2017/02/18/material-fab-burst-modal-button-with-content">&lt;p&gt;A Material design FAB burst button. When you click the button it will burst and show the content. These are some notes I took while making this micro app.&lt;/p&gt;

&lt;h2 id=&quot;positioning-the-button&quot;&gt;Positioning the button&lt;/h2&gt;
&lt;p&gt;To position the button I’m using &lt;code class=&quot;highlighter-rouge&quot;&gt;position:relative&lt;/code&gt; on the container and &lt;code class=&quot;highlighter-rouge&quot;&gt;position:absolute&lt;/code&gt; on the button. Then just a &lt;code class=&quot;highlighter-rouge&quot;&gt;buttom:y&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;right:x&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-html-for-the-burst-button&quot;&gt;The HTML for the burst button&lt;/h2&gt;
&lt;p&gt;To do this button required a rediculous amount of html. Almost to the point that this would probably never be used in a production enviroment!
I broke the button innt into many parts and the entire button could be wrapped in a container of its own to keep it abstracted from the main page content that way it overlays but to keep it simple I wanted to focus on the main idea :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;div.container
    input.btn(type=&quot;checkbox&quot;)
    div.btn
        div.circle
            div.ring
            div.outer
            div.inner +
    div.content
        h1 Real content
        p The content
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;scaling-from-the-center&quot;&gt;Scaling from the center&lt;/h2&gt;
&lt;p&gt;Initially I was using width and height and animating on those while translating the X to keep it centered. I found that using &lt;code class=&quot;highlighter-rouge&quot;&gt;transform:scale(amount)&lt;/code&gt; works better but will bug out when scaling to fast it won’t render sharp if scaling to fast.&lt;/p&gt;

&lt;h2 id=&quot;the-burst-effect&quot;&gt;The burst effect&lt;/h2&gt;
&lt;p&gt;It’s actually not a crazy difficult effect!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;First transition the ring by using &lt;code class=&quot;highlighter-rouge&quot;&gt;transform: scale(6)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then delay the outer and &lt;code class=&quot;highlighter-rouge&quot;&gt;transform: scale(30)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;After another delay on the content I use &lt;code class=&quot;highlighter-rouge&quot;&gt;opacity:1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;show-me-the-code&quot;&gt;Show me the code&lt;/h2&gt;
&lt;p&gt;Here is the codepen please take a look let me know if you have any questions or need any help!&lt;/p&gt;

&lt;p data-height=&quot;550&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;PWgMod&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;sean_codes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Front End Day 29 - NO JAVASCRIPT Material FAB Burst Popup with content&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/sean_codes/pen/PWgMod/&quot;&gt;Front End Day 29 - NO JAVASCRIPT Material FAB Burst Popup with content&lt;/a&gt; by Sean Codes (&lt;a href=&quot;http://codepen.io/sean_codes&quot;&gt;@sean_codes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="codepen" /><category term="material" /><category term="css" /><category term="coding" /><category term="nojs" /><summary type="html">A Material design FAB burst button. When you click the button it will burst and show the content. These are some notes I took while making this micro app.</summary></entry></feed>